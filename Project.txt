Work as AI agents,create an app with .NET MAUI for .net 9.0, Generated the structures, files and code for me, give me something that need to mention and so on:
 Wound Healing Progress Tracker
- Daily wound photography with consistent positioning guides
-Overlay grid for size measurement
-Healing stage logging (initial, improving, healed)
-Photo comparison slider view
-Multiple wound tracking (label: "knee scrape", "surgery incision")
 AI integration:
Automatic wound area measurement from images
Healing rate prediction based on progression
Infection detection (redness, swelling analysis)
Wound type classification (surgical, burn, diabetic ulcer)
Treatment effectiveness analysis
Medical Value: Critical for diabetic patients, post-surgery recovery, chronic wound management.

Core tech:

- framework: .net maui(C#)
- database SQLite
- Architecture Pattern: MVVM + Repository Pattern
Camera: MAUI Community Toolkit MediaPicker
Image Processing: *Choose your own
Charts: *Choose your own
Navigation: Shell Navigation

AI/ML tech ( to be optimized if you can):

ML.NET: On-device inference for wound classification
ONNX Runtime: Deploy pre-trained PyTorch/TensorFlow models
Azure Cognitive Services: Computer Vision API for advanced analysis
Python Backend (Optional): FastAPI + PyTorch for heavy processing
OpenCV.NET: Advanced image processing and segmentation

Database Schema

// Models/Wound.cs
public class Wound
{
    public int Id { get; set; }
    public string Name { get; set; } // "Knee Scrape", "Surgery Incision"
    public string BodyLocation { get; set; } // "Left Knee", "Abdomen"
    public WoundType Type { get; set; } // Enum: Surgical, Burn, Diabetic, Traumatic
    public DateTime DateCreated { get; set; }
    public DateTime? DateHealed { get; set; }
    public bool IsActive { get; set; }
    public string Notes { get; set; }
    
    // Relationships
    public List<WoundPhoto> Photos { get; set; }
    public List<HealingStageLog> HealingLogs { get; set; }
}

// Models/WoundPhoto.cs
public class WoundPhoto
{
    public int Id { get; set; }
    public int WoundId { get; set; }
    public DateTime DateTaken { get; set; }
    public string PhotoPath { get; set; }
    public string ThumbnailPath { get; set; }
    
    // Measurements
    public double? WoundAreaCm2 { get; set; }
    public double? LengthMm { get; set; }
    public double? WidthMm { get; set; }
    public double? DepthMm { get; set; }
    
    // Positioning data for consistency
    public double CameraDistanceCm { get; set; }
    public double CameraAngle { get; set; }
    public string ReferenceObjectUsed { get; set; } // "Coin", "Ruler"
    
    // AI Analysis Results (populated later)
    public double? InfectionRiskScore { get; set; }
    public double? HealingProgressScore { get; set; }
    public string AIClassification { get; set; }
    public string AIDetectedIssues { get; set; } // JSON array
    
    public string Notes { get; set; }
    
    // Foreign Key
    public Wound Wound { get; set; }
}

// Models/HealingStageLog.cs
public class HealingStageLog
{
    public int Id { get; set; }
    public int WoundId { get; set; }
    public DateTime Date { get; set; }
    public HealingStage Stage { get; set; }
    public int PainLevel { get; set; } // 0-10 scale
    public bool HasRedness { get; set; }
    public bool HasSwelling { get; set; }
    public bool HasDrainage { get; set; }
    public string DrainageType { get; set; } // "Clear", "Bloody", "Pus"
    public string Notes { get; set; }
    
    public Wound Wound { get; set; }
}

// Enums
public enum WoundType
{
    Surgical,
    Burn,
    Diabetic,
    Traumatic,
    Pressure,
    Other
}

public enum HealingStage
{
    Initial,
    Inflammatory,
    Proliferative,
    Remodeling,
    Healed
}
